Linked List Introduction

Linked lists are one of the basic data structures used in computer science. They have many direct applications and serve as the foundation for more complex data structures.

The list is comprised of a series of nodes. The HEAD NODE is the node at the beginning of the list. Each node contains data and a link (or pointer) to the next node in the list.
The list is terminated when a node's link is null. This is called TAIL NODE.

Since the nodes use links to denote the next node in the sequence, the nodes are not required to be sequentially located in memory. These links allow for quick insertion and removal of nodes.

Common operations on a linked list may include:
- adding nodes
- removing nodes
- finding a node
- traversing the linked list

Linked lists typically contain unidirectional links (next node) but some implementations make use of bidirectional links (next and previous nodes).

Linked List Adding and Removing nodes

Adding a new node
Adding a new noed to the beginning of the list requires you to link your new node to the current head node. This way, you maintain your connection with the following nodes in the list.

Removing a node
If you accidentally remove the single link to a node, that node's data and any following nodes could be lost to your application, leaving you with orphaned nodes.

To properly maintain the list when removing a node from the middle of a linked list, you need to be sure to adjust the link on the previous node so that it points to the following node.

Depending on the language, nodes which are no referenced are removed automatically. "Removing" a node is equivalent to removing all references to the node.

SUMMARY
Linked Lists:
- Are comprised of nodes
- The nodes contain a link to the next node (and also the previous node for bidirectional linked lists)
- Can be unidirectional or bidirectional
- Are a basic data structure, and form the basis for many other data structures
- Have a single head node, which serves as the first node in the list
- Require some maintenance in order to add or remove nodes
- The methods we used are an example and depend on the exact use case and/or programming language being used


